#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from contact import ContactSvc
from contact.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  Contact create(Contact contact)'
  print '  Contact read(string contactId)'
  print '  Contact update(Contact contact)'
  print '  void destroy(string contactId)'
  print '   fetch()'
  print '  void reset()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ContactSvc.Client(protocol)
transport.open()

if cmd == 'create':
  if len(args) != 1:
    print 'create requires 1 args'
    sys.exit(1)
  pp.pprint(client.create(eval(args[0]),))

elif cmd == 'read':
  if len(args) != 1:
    print 'read requires 1 args'
    sys.exit(1)
  pp.pprint(client.read(args[0],))

elif cmd == 'update':
  if len(args) != 1:
    print 'update requires 1 args'
    sys.exit(1)
  pp.pprint(client.update(eval(args[0]),))

elif cmd == 'destroy':
  if len(args) != 1:
    print 'destroy requires 1 args'
    sys.exit(1)
  pp.pprint(client.destroy(args[0],))

elif cmd == 'fetch':
  if len(args) != 0:
    print 'fetch requires 0 args'
    sys.exit(1)
  pp.pprint(client.fetch())

elif cmd == 'reset':
  if len(args) != 0:
    print 'reset requires 0 args'
    sys.exit(1)
  pp.pprint(client.reset())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
