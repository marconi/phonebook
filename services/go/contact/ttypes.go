// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package contact

import (
	"fmt"
	"math"
	"time"

	"git-wip-us.apache.org/repos/asf/thrift.git/lib/go/thrift"
	"github.com/nu7hatch/gouuid"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type Timestamp string

type Contact struct {
	Id      string `thrift:"id,1,required"`
	Name    string `thrift:"name,2,required"`
	Phone   string `thrift:"phone,3,required"`
	Email   string `thrift:"email,4"`
	Created string `thrift:"created,5,required"`
}

func NewContact() *Contact {
	return &Contact{}
}

func NewContactInit(name string, phone string, email string) *Contact {
	u4, _ := uuid.NewV4()
	return &Contact{
		Id:      u4.String(),
		Name:    name,
		Phone:   phone,
		Email:   email,
		Created: time.Now().UTC().Format(time.RFC3339),
	}
}

func (p *Contact) IsSetEmail() bool {
	return p.Email != ""
}

func (p *Contact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Contact) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Contact) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *Contact) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Contact) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Email = v
	}
	return nil
}

func (p *Contact) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Created = v
	}
	return nil
}

func (p *Contact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Contact"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Contact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *Contact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *Contact) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:phone: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return fmt.Errorf("%T.phone (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:phone: %s", p, err)
	}
	return err
}

func (p *Contact) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:email: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Email)); err != nil {
			return fmt.Errorf("%T.email (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:email: %s", p, err)
		}
	}
	return err
}

func (p *Contact) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("created", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:created: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Created)); err != nil {
		return fmt.Errorf("%T.created (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:created: %s", p, err)
	}
	return err
}

func (p *Contact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contact(%+v)", *p)
}
